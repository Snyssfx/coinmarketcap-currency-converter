package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/shopspring/decimal"
)

// ServiceMock implements internal.service
type ServiceMock struct {
	t minimock.Tester

	funcConvert          func(amount decimal.Decimal, from string, to string) (d1 decimal.Decimal, err error)
	inspectFuncConvert   func(amount decimal.Decimal, from string, to string)
	afterConvertCounter  uint64
	beforeConvertCounter uint64
	ConvertMock          mServiceMockConvert
}

// NewServiceMock returns a mock for internal.service
func NewServiceMock(t minimock.Tester) *ServiceMock {
	m := &ServiceMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ConvertMock = mServiceMockConvert{mock: m}
	m.ConvertMock.callArgs = []*ServiceMockConvertParams{}

	return m
}

type mServiceMockConvert struct {
	mock               *ServiceMock
	defaultExpectation *ServiceMockConvertExpectation
	expectations       []*ServiceMockConvertExpectation

	callArgs []*ServiceMockConvertParams
	mutex    sync.RWMutex
}

// ServiceMockConvertExpectation specifies expectation struct of the service.Convert
type ServiceMockConvertExpectation struct {
	mock    *ServiceMock
	params  *ServiceMockConvertParams
	results *ServiceMockConvertResults
	Counter uint64
}

// ServiceMockConvertParams contains parameters of the service.Convert
type ServiceMockConvertParams struct {
	amount decimal.Decimal
	from   string
	to     string
}

// ServiceMockConvertResults contains results of the service.Convert
type ServiceMockConvertResults struct {
	d1  decimal.Decimal
	err error
}

// Expect sets up expected params for service.Convert
func (mmConvert *mServiceMockConvert) Expect(amount decimal.Decimal, from string, to string) *mServiceMockConvert {
	if mmConvert.mock.funcConvert != nil {
		mmConvert.mock.t.Fatalf("ServiceMock.Convert mock is already set by Set")
	}

	if mmConvert.defaultExpectation == nil {
		mmConvert.defaultExpectation = &ServiceMockConvertExpectation{}
	}

	mmConvert.defaultExpectation.params = &ServiceMockConvertParams{amount, from, to}
	for _, e := range mmConvert.expectations {
		if minimock.Equal(e.params, mmConvert.defaultExpectation.params) {
			mmConvert.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmConvert.defaultExpectation.params)
		}
	}

	return mmConvert
}

// Inspect accepts an inspector function that has same arguments as the service.Convert
func (mmConvert *mServiceMockConvert) Inspect(f func(amount decimal.Decimal, from string, to string)) *mServiceMockConvert {
	if mmConvert.mock.inspectFuncConvert != nil {
		mmConvert.mock.t.Fatalf("Inspect function is already set for ServiceMock.Convert")
	}

	mmConvert.mock.inspectFuncConvert = f

	return mmConvert
}

// Return sets up results that will be returned by service.Convert
func (mmConvert *mServiceMockConvert) Return(d1 decimal.Decimal, err error) *ServiceMock {
	if mmConvert.mock.funcConvert != nil {
		mmConvert.mock.t.Fatalf("ServiceMock.Convert mock is already set by Set")
	}

	if mmConvert.defaultExpectation == nil {
		mmConvert.defaultExpectation = &ServiceMockConvertExpectation{mock: mmConvert.mock}
	}
	mmConvert.defaultExpectation.results = &ServiceMockConvertResults{d1, err}
	return mmConvert.mock
}

//Set uses given function f to mock the service.Convert method
func (mmConvert *mServiceMockConvert) Set(f func(amount decimal.Decimal, from string, to string) (d1 decimal.Decimal, err error)) *ServiceMock {
	if mmConvert.defaultExpectation != nil {
		mmConvert.mock.t.Fatalf("Default expectation is already set for the service.Convert method")
	}

	if len(mmConvert.expectations) > 0 {
		mmConvert.mock.t.Fatalf("Some expectations are already set for the service.Convert method")
	}

	mmConvert.mock.funcConvert = f
	return mmConvert.mock
}

// When sets expectation for the service.Convert which will trigger the result defined by the following
// Then helper
func (mmConvert *mServiceMockConvert) When(amount decimal.Decimal, from string, to string) *ServiceMockConvertExpectation {
	if mmConvert.mock.funcConvert != nil {
		mmConvert.mock.t.Fatalf("ServiceMock.Convert mock is already set by Set")
	}

	expectation := &ServiceMockConvertExpectation{
		mock:   mmConvert.mock,
		params: &ServiceMockConvertParams{amount, from, to},
	}
	mmConvert.expectations = append(mmConvert.expectations, expectation)
	return expectation
}

// Then sets up service.Convert return parameters for the expectation previously defined by the When method
func (e *ServiceMockConvertExpectation) Then(d1 decimal.Decimal, err error) *ServiceMock {
	e.results = &ServiceMockConvertResults{d1, err}
	return e.mock
}

// Convert implements internal.service
func (mmConvert *ServiceMock) Convert(amount decimal.Decimal, from string, to string) (d1 decimal.Decimal, err error) {
	mm_atomic.AddUint64(&mmConvert.beforeConvertCounter, 1)
	defer mm_atomic.AddUint64(&mmConvert.afterConvertCounter, 1)

	if mmConvert.inspectFuncConvert != nil {
		mmConvert.inspectFuncConvert(amount, from, to)
	}

	mm_params := &ServiceMockConvertParams{amount, from, to}

	// Record call args
	mmConvert.ConvertMock.mutex.Lock()
	mmConvert.ConvertMock.callArgs = append(mmConvert.ConvertMock.callArgs, mm_params)
	mmConvert.ConvertMock.mutex.Unlock()

	for _, e := range mmConvert.ConvertMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.d1, e.results.err
		}
	}

	if mmConvert.ConvertMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmConvert.ConvertMock.defaultExpectation.Counter, 1)
		mm_want := mmConvert.ConvertMock.defaultExpectation.params
		mm_got := ServiceMockConvertParams{amount, from, to}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmConvert.t.Errorf("ServiceMock.Convert got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmConvert.ConvertMock.defaultExpectation.results
		if mm_results == nil {
			mmConvert.t.Fatal("No results are set for the ServiceMock.Convert")
		}
		return (*mm_results).d1, (*mm_results).err
	}
	if mmConvert.funcConvert != nil {
		return mmConvert.funcConvert(amount, from, to)
	}
	mmConvert.t.Fatalf("Unexpected call to ServiceMock.Convert. %v %v %v", amount, from, to)
	return
}

// ConvertAfterCounter returns a count of finished ServiceMock.Convert invocations
func (mmConvert *ServiceMock) ConvertAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConvert.afterConvertCounter)
}

// ConvertBeforeCounter returns a count of ServiceMock.Convert invocations
func (mmConvert *ServiceMock) ConvertBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConvert.beforeConvertCounter)
}

// Calls returns a list of arguments used in each call to ServiceMock.Convert.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmConvert *mServiceMockConvert) Calls() []*ServiceMockConvertParams {
	mmConvert.mutex.RLock()

	argCopy := make([]*ServiceMockConvertParams, len(mmConvert.callArgs))
	copy(argCopy, mmConvert.callArgs)

	mmConvert.mutex.RUnlock()

	return argCopy
}

// MinimockConvertDone returns true if the count of the Convert invocations corresponds
// the number of defined expectations
func (m *ServiceMock) MinimockConvertDone() bool {
	for _, e := range m.ConvertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConvertMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConvertCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConvert != nil && mm_atomic.LoadUint64(&m.afterConvertCounter) < 1 {
		return false
	}
	return true
}

// MinimockConvertInspect logs each unmet expectation
func (m *ServiceMock) MinimockConvertInspect() {
	for _, e := range m.ConvertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ServiceMock.Convert with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConvertMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConvertCounter) < 1 {
		if m.ConvertMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ServiceMock.Convert")
		} else {
			m.t.Errorf("Expected call to ServiceMock.Convert with params: %#v", *m.ConvertMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConvert != nil && mm_atomic.LoadUint64(&m.afterConvertCounter) < 1 {
		m.t.Error("Expected call to ServiceMock.Convert")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ServiceMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockConvertInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockConvertDone()
}
