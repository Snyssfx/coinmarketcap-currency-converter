package mock

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/shopspring/decimal"
)

// UnitConverterMock implements internal.unitConverter
type UnitConverterMock struct {
	t minimock.Tester

	funcConvert          func(from string, to string) (d1 decimal.Decimal, err error)
	inspectFuncConvert   func(from string, to string)
	afterConvertCounter  uint64
	beforeConvertCounter uint64
	ConvertMock          mUnitConverterMockConvert
}

// NewUnitConverterMock returns a mock for internal.unitConverter
func NewUnitConverterMock(t minimock.Tester) *UnitConverterMock {
	m := &UnitConverterMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ConvertMock = mUnitConverterMockConvert{mock: m}
	m.ConvertMock.callArgs = []*UnitConverterMockConvertParams{}

	return m
}

type mUnitConverterMockConvert struct {
	mock               *UnitConverterMock
	defaultExpectation *UnitConverterMockConvertExpectation
	expectations       []*UnitConverterMockConvertExpectation

	callArgs []*UnitConverterMockConvertParams
	mutex    sync.RWMutex
}

// UnitConverterMockConvertExpectation specifies expectation struct of the unitConverter.Convert
type UnitConverterMockConvertExpectation struct {
	mock    *UnitConverterMock
	params  *UnitConverterMockConvertParams
	results *UnitConverterMockConvertResults
	Counter uint64
}

// UnitConverterMockConvertParams contains parameters of the unitConverter.Convert
type UnitConverterMockConvertParams struct {
	from string
	to   string
}

// UnitConverterMockConvertResults contains results of the unitConverter.Convert
type UnitConverterMockConvertResults struct {
	d1  decimal.Decimal
	err error
}

// Expect sets up expected params for unitConverter.Convert
func (mmConvert *mUnitConverterMockConvert) Expect(from string, to string) *mUnitConverterMockConvert {
	if mmConvert.mock.funcConvert != nil {
		mmConvert.mock.t.Fatalf("UnitConverterMock.Convert mock is already set by Set")
	}

	if mmConvert.defaultExpectation == nil {
		mmConvert.defaultExpectation = &UnitConverterMockConvertExpectation{}
	}

	mmConvert.defaultExpectation.params = &UnitConverterMockConvertParams{from, to}
	for _, e := range mmConvert.expectations {
		if minimock.Equal(e.params, mmConvert.defaultExpectation.params) {
			mmConvert.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmConvert.defaultExpectation.params)
		}
	}

	return mmConvert
}

// Inspect accepts an inspector function that has same arguments as the unitConverter.Convert
func (mmConvert *mUnitConverterMockConvert) Inspect(f func(from string, to string)) *mUnitConverterMockConvert {
	if mmConvert.mock.inspectFuncConvert != nil {
		mmConvert.mock.t.Fatalf("Inspect function is already set for UnitConverterMock.Convert")
	}

	mmConvert.mock.inspectFuncConvert = f

	return mmConvert
}

// Return sets up results that will be returned by unitConverter.Convert
func (mmConvert *mUnitConverterMockConvert) Return(d1 decimal.Decimal, err error) *UnitConverterMock {
	if mmConvert.mock.funcConvert != nil {
		mmConvert.mock.t.Fatalf("UnitConverterMock.Convert mock is already set by Set")
	}

	if mmConvert.defaultExpectation == nil {
		mmConvert.defaultExpectation = &UnitConverterMockConvertExpectation{mock: mmConvert.mock}
	}
	mmConvert.defaultExpectation.results = &UnitConverterMockConvertResults{d1, err}
	return mmConvert.mock
}

//Set uses given function f to mock the unitConverter.Convert method
func (mmConvert *mUnitConverterMockConvert) Set(f func(from string, to string) (d1 decimal.Decimal, err error)) *UnitConverterMock {
	if mmConvert.defaultExpectation != nil {
		mmConvert.mock.t.Fatalf("Default expectation is already set for the unitConverter.Convert method")
	}

	if len(mmConvert.expectations) > 0 {
		mmConvert.mock.t.Fatalf("Some expectations are already set for the unitConverter.Convert method")
	}

	mmConvert.mock.funcConvert = f
	return mmConvert.mock
}

// When sets expectation for the unitConverter.Convert which will trigger the result defined by the following
// Then helper
func (mmConvert *mUnitConverterMockConvert) When(from string, to string) *UnitConverterMockConvertExpectation {
	if mmConvert.mock.funcConvert != nil {
		mmConvert.mock.t.Fatalf("UnitConverterMock.Convert mock is already set by Set")
	}

	expectation := &UnitConverterMockConvertExpectation{
		mock:   mmConvert.mock,
		params: &UnitConverterMockConvertParams{from, to},
	}
	mmConvert.expectations = append(mmConvert.expectations, expectation)
	return expectation
}

// Then sets up unitConverter.Convert return parameters for the expectation previously defined by the When method
func (e *UnitConverterMockConvertExpectation) Then(d1 decimal.Decimal, err error) *UnitConverterMock {
	e.results = &UnitConverterMockConvertResults{d1, err}
	return e.mock
}

// Convert implements internal.unitConverter
func (mmConvert *UnitConverterMock) Convert(from string, to string) (d1 decimal.Decimal, err error) {
	mm_atomic.AddUint64(&mmConvert.beforeConvertCounter, 1)
	defer mm_atomic.AddUint64(&mmConvert.afterConvertCounter, 1)

	if mmConvert.inspectFuncConvert != nil {
		mmConvert.inspectFuncConvert(from, to)
	}

	mm_params := &UnitConverterMockConvertParams{from, to}

	// Record call args
	mmConvert.ConvertMock.mutex.Lock()
	mmConvert.ConvertMock.callArgs = append(mmConvert.ConvertMock.callArgs, mm_params)
	mmConvert.ConvertMock.mutex.Unlock()

	for _, e := range mmConvert.ConvertMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.d1, e.results.err
		}
	}

	if mmConvert.ConvertMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmConvert.ConvertMock.defaultExpectation.Counter, 1)
		mm_want := mmConvert.ConvertMock.defaultExpectation.params
		mm_got := UnitConverterMockConvertParams{from, to}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmConvert.t.Errorf("UnitConverterMock.Convert got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmConvert.ConvertMock.defaultExpectation.results
		if mm_results == nil {
			mmConvert.t.Fatal("No results are set for the UnitConverterMock.Convert")
		}
		return (*mm_results).d1, (*mm_results).err
	}
	if mmConvert.funcConvert != nil {
		return mmConvert.funcConvert(from, to)
	}
	mmConvert.t.Fatalf("Unexpected call to UnitConverterMock.Convert. %v %v", from, to)
	return
}

// ConvertAfterCounter returns a count of finished UnitConverterMock.Convert invocations
func (mmConvert *UnitConverterMock) ConvertAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConvert.afterConvertCounter)
}

// ConvertBeforeCounter returns a count of UnitConverterMock.Convert invocations
func (mmConvert *UnitConverterMock) ConvertBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmConvert.beforeConvertCounter)
}

// Calls returns a list of arguments used in each call to UnitConverterMock.Convert.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmConvert *mUnitConverterMockConvert) Calls() []*UnitConverterMockConvertParams {
	mmConvert.mutex.RLock()

	argCopy := make([]*UnitConverterMockConvertParams, len(mmConvert.callArgs))
	copy(argCopy, mmConvert.callArgs)

	mmConvert.mutex.RUnlock()

	return argCopy
}

// MinimockConvertDone returns true if the count of the Convert invocations corresponds
// the number of defined expectations
func (m *UnitConverterMock) MinimockConvertDone() bool {
	for _, e := range m.ConvertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConvertMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConvertCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConvert != nil && mm_atomic.LoadUint64(&m.afterConvertCounter) < 1 {
		return false
	}
	return true
}

// MinimockConvertInspect logs each unmet expectation
func (m *UnitConverterMock) MinimockConvertInspect() {
	for _, e := range m.ConvertMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UnitConverterMock.Convert with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ConvertMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterConvertCounter) < 1 {
		if m.ConvertMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UnitConverterMock.Convert")
		} else {
			m.t.Errorf("Expected call to UnitConverterMock.Convert with params: %#v", *m.ConvertMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcConvert != nil && mm_atomic.LoadUint64(&m.afterConvertCounter) < 1 {
		m.t.Error("Expected call to UnitConverterMock.Convert")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UnitConverterMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockConvertInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UnitConverterMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UnitConverterMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockConvertDone()
}
